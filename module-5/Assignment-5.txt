Extending the Flask App 

Objective: To challenge advanced students and encourage exploration.

Task:
As an optional assignment for more advanced learners, you can encourage them to extend their Flask application by adding new features or functionality of their choice. This assignment aims to provide students with the opportunity to explore and apply advanced concepts and technologies. Some ideas for extending the Flask app include:

Implementing User Authentication:

Use Flask-Login or Flask-User to add user authentication to the Flask application.
Create user profiles and enable user-specific features like personalized content and user dashboards.
Adding a Database:

Integrate a database system (e.g., SQLite, PostgreSQL, MySQL) with the Flask app using an Object-Relational Mapping (ORM) library like Flask-SQLAlchemy.
Modify the existing application to store and retrieve data from the database.
Implement database models and migrations.
Incorporating Third-Party APIs:

Integrate third-party APIs to retrieve and display data within the Flask app.
Examples: Weather data from a weather API, news articles from a news API, or user data from a social media API.
Creating Interactive Data Visualization:

Utilize JavaScript libraries like D3.js to create interactive data visualizations within the Flask app.
Display charts, graphs, or maps that dynamically update based on user input or data changes.
Instructions:

Instruct advanced students to choose one or more of the above-mentioned options or propose their own ideas for extending the Flask app.

Encourage them to plan and design the new features carefully, considering the user experience and application architecture.

Provide guidance on implementing the chosen features, including the use of relevant Flask extensions and libraries.

Advise students to thoroughly test the new functionality and ensure that it integrates seamlessly with the existing Flask app.

Encourage them to document their work, including code comments and explanations of how the new features were implemented.

Remind students that this assignment is an opportunity for creativity and exploration, so they can experiment with different technologies and approaches.

After completing the extended features, instruct students to demonstrate their work by running the Flask app and showcasing the new functionality.

Encourage them to share their experiences and challenges faced during the extension process.

Submission:

After completing the optional assignment, students should create a ZIP file containing the entire Flask project directory, including any new code files, templates, and configurations related to the extended features.

Instruct them to upload the ZIP file to the course's assignment submission portal.

Evaluation Criteria:

Implementation of the chosen features or functionality.
Effective use of Flask extensions or libraries as needed.
Proper documentation of the extended code, including comments and explanations.
Successful integration of the new features with the existing Flask app.
Testing and verification of the new functionality.
Demonstrated creativity and exploration in extending the Flask app.
Adherence to the submission instructions.