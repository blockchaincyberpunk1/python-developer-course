Clustering with Scikit-Learn

Objective: To explore unsupervised learning and clustering.

Task:
In this assignment, students will apply clustering algorithms from Scikit-Learn to a dataset. They should load and preprocess the dataset, choose an appropriate clustering algorithm (e.g., K-means clustering), cluster the data, visualize the clusters, analyze the results, and discuss potential use cases for clustering.

Instructions:

Instruct students to open their preferred text editor or integrated development environment (IDE) for Python.

Ask them to choose a dataset for clustering. The dataset should not have predefined labels, as clustering is an unsupervised learning task. The dataset can be relevant to their interests or provided by the instructor.

Encourage students to load the chosen dataset into a Pandas DataFrame using the pandas library's read_csv() function. They should ensure that they understand the structure of the data and the meaning of each column.

Example code to load a CSV file:


import pandas as pd

# Load the dataset into a Pandas DataFrame
df = pd.read_csv('dataset.csv')


Guide students to preprocess the data as necessary. This may involve handling missing values, encoding categorical variables, and scaling or normalizing numeric features.

Instruct students to choose an appropriate clustering algorithm from Scikit-Learn, such as K-means clustering, hierarchical clustering, or DBSCAN. They should create an instance of the chosen clustering model.

Example code to create a K-means clustering model:


from sklearn.cluster import KMeans

# Create a K-means clustering model with a specified number of clusters (k)
k = 3  # Adjust the number of clusters as needed
model = KMeans(n_clusters=k)


Encourage students to train the clustering model using the dataset. They should fit the model to the dataset to identify clusters.

Example code to train the model:


# Train the clustering model
model.fit(X)


Ask students to use the trained model to predict cluster labels for each data point in the dataset.

Example code to predict cluster labels:


# Predict cluster labels for the data points
cluster_labels = model.predict(X)


Instruct students to visualize the clusters. They can use scatter plots or other suitable visualization techniques to represent the data points and their cluster assignments.

Example code to visualize clusters using Matplotlib:


import matplotlib.pyplot as plt

# Visualize the clusters
plt.scatter(X[:, 0], X[:, 1], c=cluster_labels, cmap='viridis')
plt.xlabel('Feature 1')
plt.ylabel('Feature 2')
plt.title('Cluster Visualization')
plt.show()


Encourage students to analyze the results of clustering, such as the cluster centroids (for K-means), and discuss the insights gained from the clustering. They should consider potential use cases for clustering in real-world scenarios.

Instruct students to write a report summarizing their clustering experiments, including the dataset used, data preprocessing steps, the choice of clustering algorithm, visualizations of clusters, analysis of results, and discussions about potential use cases.

Ask students to submit the Python script containing their data preprocessing, clustering, and visualization code, along with the report summarizing their findings and discussions.

Assignment Variation:
To make the assignment more advanced, students can explore other clustering algorithms and techniques, such as dimensionality reduction before clustering or evaluating clustering quality using internal and external metrics.

Submission:

After completing the assignment, students should create a ZIP file containing their Python script, any necessary data preprocessing code, explanations of their findings, and conclusions.

Instruct them to upload the ZIP file to the course's assignment submission portal.

Evaluation Criteria:

Proper loading and understanding of the clustering dataset.
Effective data preprocessing techniques.
Correct implementation of the chosen clustering algorithm.
Clear and informative cluster visualizations.
Insightful analysis of clustering results.
Thoughtful discussions about potential use cases for clustering.
Adherence to the submission instructions.