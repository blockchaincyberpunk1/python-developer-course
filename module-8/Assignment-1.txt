Data Analysis with Pandas

Objective: To practice data analysis using Python's Pandas library.

Task:
In this assignment, students will work with a dataset (e.g., a CSV file) and perform data analysis using Pandas. They should load the dataset into a Pandas DataFrame, clean and preprocess the data (e.g., handling missing values), and perform exploratory data analysis (EDA) by calculating summary statistics, visualizing data, and drawing insights.

Instructions:

Instruct students to open their preferred text editor or integrated development environment (IDE) for Python.

Ask them to choose a dataset for analysis. They can use publicly available datasets, such as those from Kaggle, UCI Machine Learning Repository, or any other source of interest. Alternatively, you can provide a dataset for this assignment.

Encourage students to load the chosen dataset into a Pandas DataFrame using the pandas library's read_csv() function. They should ensure that they understand the structure of the data and the meaning of each column.

Example code to load a CSV file:


import pandas as pd

# Load the dataset into a Pandas DataFrame
df = pd.read_csv('dataset.csv')


Guide students to inspect the dataset, checking for missing values and data types. They should clean and preprocess the data as needed, which may involve handling missing values, converting data types, or removing irrelevant columns.

Example code to check for missing values and handle them:


# Check for missing values
missing_values = df.isnull().sum()

# Handle missing values (e.g., fill with mean, drop rows)
df['column_name'].fillna(df['column_name'].mean(), inplace=True)


Instruct students to perform exploratory data analysis (EDA) by calculating summary statistics (e.g., mean, median, standard deviation), creating data visualizations (e.g., histograms, scatter plots), and drawing insights from the data.

Example code to calculate summary statistics:


# Calculate summary statistics
summary_stats = df.describe()


Example code to create a histogram:


import matplotlib.pyplot as plt

# Create a histogram
plt.hist(df['column_name'], bins=20, color='skyblue', edgecolor='black')
plt.xlabel('X-axis label')
plt.ylabel('Frequency')
plt.title('Histogram of Column Name')
plt.show()


Encourage students to use data visualization libraries such as Matplotlib or Seaborn to create informative plots that help visualize the data's patterns and trends.

Ask them to draw insights from their analysis, which could include identifying trends, correlations, outliers, or patterns in the data. They should document their findings.

Instruct students to write a report summarizing their data analysis process, including the dataset used, data preprocessing steps, EDA findings, and insights drawn from the analysis.

Encourage them to submit the Python script containing their data analysis code, any generated plots or visualizations, and the report summarizing their analysis.

Assignment Variation:
To make the assignment more advanced, students can explore more complex datasets, perform advanced data preprocessing techniques (e.g., feature engineering), or use machine learning models to predict or classify data based on the analysis.

Submission:

After completing the assignment, students should create a ZIP file containing their Python script, any generated plots or visualizations, the report in a suitable format (e.g., PDF or Markdown), and any additional documentation.

Instruct them to upload the ZIP file to the course's assignment submission portal.

Evaluation Criteria:

Proper loading and handling of the dataset using Pandas.
Effective data cleaning and preprocessing steps.
Meaningful and informative data visualizations.
Clear and insightful findings documented in the report.
Adherence to the submission instructions.