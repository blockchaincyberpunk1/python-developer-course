Basic Web Application with Flask

Objective: To create a simple web application using Flask.

Task:
In this assignment, students will build a basic web application using Flask. They should set up a Flask project, create multiple routes for different pages (e.g., home page, about page, contact page), render HTML templates for each page, add navigation links to move between pages, and enhance the application with CSS for styling.

Instructions:

Instruct the students to open their preferred text editor or integrated development environment (IDE) for Python.

Ask them to create a directory for the Flask project and navigate to this directory in the terminal or command prompt.

Guide students to set up a virtual environment to isolate their project's dependencies by running the following commands:


# Create a virtual environment
python -m venv venv

# Activate the virtual environment
# On Windows
venv\Scripts\activate
# On macOS and Linux
source venv/bin/activate


Instruct them to install Flask within the virtual environment using pip:


pip install Flask


Ask students to create a Python file (e.g., "app.py") for their Flask application and set up the Flask project by importing Flask:


from flask import Flask

app = Flask(__name__)


Guide students to create routes for different pages of the web application. For example:


@app.route('/')
def home():
    return 'Welcome to the Home Page'

@app.route('/about')
def about():
    return 'About Us'

@app.route('/contact')
def contact():
    return 'Contact Us'


Instruct students to create HTML templates for each page in a "templates" directory within the project directory. For example, they can create "home.html," "about.html," and "contact.html" templates.

Encourage students to enhance their templates with HTML content and add navigation links to move between pages. For example:


<!-- home.html -->
<h1>Home Page</h1>
<p>Welcome to our website!</p>
<a href="/about">About</a> | <a href="/contact">Contact</a>


Guide students to render the HTML templates in their Flask routes using the render_template function from Flask:


from flask import render_template

@app.route('/')
def home():
    return render_template('home.html')

@app.route('/about')
def about():
    return render_template('about.html')

@app.route('/contact')
def contact():
    return render_template('contact.html')


Instruct students to add CSS for styling their web application. They can create a "static" directory within the project directory and include CSS files (e.g., "style.css"):


project_directory/
├── app.py
├── templates/
│   ├── home.html
│   ├── about.html
│   └── contact.html
├── static/
│   └── style.css


Encourage students to link the CSS file to their HTML templates to apply styling to the pages.

<!-- home.html -->
<link rel="stylesheet" type="text/css" href="{{ url_for('static', filename='style.css') }}">


Advise students to run their Flask application by adding the following code at the end of their "app.py" file:

if __name__ == '__main__':
    app.run(debug=True)


Instruct them to run the Flask development server using the following command:

python app.py


Ask students to open a web browser and navigate to the URL where their Flask app is running (typically, it will be something like "http://localhost:5000"). They should be able to access different pages with navigation links and see the basic styling applied using CSS.

Encourage students to experiment with further CSS styling and template content to personalize their web application.

Save the Python file ("app.py"), HTML templates, and CSS files with appropriate filenames and extensions.

Assignment Variation:
To make the assignment more complex, students can add more pages, forms for user input, or dynamic content by passing data to templates.

Submission:

After completing the assignment, students should create a ZIP file containing the entire Flask project directory, including all code files, templates, and static files (CSS).

Instruct them to upload the ZIP file to the course's assignment submission portal.

Evaluation Criteria:

Proper setup of a Flask project.
Correct creation of routes for different pages.
Accurate rendering of HTML templates.
Implementation of navigation links between pages.
Effective use of CSS for styling.
Successful execution of the Flask development server.
Adherence to the submission instructions.